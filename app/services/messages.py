import logging
import asyncio
from datetime import datetime
from aiogram import Bot
from app.services.api import ApiClient
from app.config import CHAT_ID

logger = logging.getLogger(__name__)

def split_long_message(text, max_length=4096):
    """–†–∞–∑–¥–µ–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram."""
    if len(text) <= max_length:
        return [text]
    
    parts = []
    for i in range(0, len(text), max_length):
        parts.append(text[i:i + max_length])
    return parts

async def send_long_message(bot, chat_id, text, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —á–∞—Å—Ç—è–º."""
    parts = split_long_message(text)
    sent_messages = []
    for part in parts:
        sent = await bot.send_message(chat_id=chat_id, text=part, **kwargs)
        sent_messages.append(sent)
    return sent_messages

class MorningMessageSender:
    def __init__(self, bot):
        self.bot = bot

    async def send_morning_message(self):
        logger.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        try:
            cities = {
                "–ú–∏–Ω—Å–∫": "Minsk,BY", "–ñ–ª–æ–±–∏–Ω": "Zhlobin,BY", "–ì–æ–º–µ–ª—å": "Gomel,BY",
                "–ñ–∏—Ç–∫–æ–≤–∏—á–∏": "Zhitkovichi,BY", "–®—Ä–∏-–õ–∞–Ω–∫–∞": "Colombo,LK", "–ù–æ—è–±—Ä—å—Å–∫": "Noyabrsk,RU"
            }
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∫ API
            weather_tasks = [ApiClient.get_weather(code) for code in cities.values()]
            currency_task = ApiClient.get_currency_rates()
            crypto_task = ApiClient.get_crypto_prices()
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results = await asyncio.gather(
                *weather_tasks,
                currency_task,
                crypto_task,
                return_exceptions=True
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            weather_results = results[:len(cities)]
            usd_byn_rate, usd_rub_rate = results[len(cities)]
            btc_price_usd, wld_price_usd = results[len(cities) + 1]
            
            weather_data = dict(zip(cities.keys(), weather_results))
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã –≤ BYN
            btc_price_byn = float(btc_price_usd) * float(usd_byn_rate) if btc_price_usd and usd_byn_rate else 0
            wld_price_byn = float(wld_price_usd) * float(usd_byn_rate) if wld_price_usd and usd_byn_rate else 0
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                "–†–æ–¥–Ω—ã–µ –º–æ–∏, –≤—Å–µ–º –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ‚ù§Ô∏è\n\n"
                "*–ü–æ–ª–æ–∂–Ω—è–∫ –ø–æ –ø–æ–≥–æ–¥–µ:*\n"
                + "\n".join(f"üå• *{city}*: {data if not isinstance(data, Exception) else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}" 
                          for city, data in weather_data.items()) + "\n\n"
                "*–ü–æ–ª–æ–∂–Ω—è–∫ –ø–æ –∫—É—Ä—Å–∞–º:*\n"
                f"üíµ *USD/BYN*: {usd_byn_rate:.2f} BYN\n"
                f"üíµ *USD/RUB*: {usd_rub_rate:.2f} RUB\n"
                f"‚Çø *BTC*: ${btc_price_usd:,.2f} USD | {btc_price_byn:,.2f} BYN\n"
                f"üåç *WLD*: ${wld_price_usd:.2f} USD | {wld_price_byn:.2f} BYN"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_message = await self.bot.send_message(
                chat_id=CHAT_ID, 
                text=message, 
                parse_mode="MARKDOWN"
            )
            
            logger.info("–£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return sent_message
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            return None