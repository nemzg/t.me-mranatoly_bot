import logging
import asyncio
import asyncpg
import pytz
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from functools import partial

from app.config import (
    TELEGRAM_TOKEN, DATABASE_URL, CODE_VERSION,
    CHAT_ID, ADMIN_CHAT_ID, BACKUP_ENABLED, MONITORING_ENABLED
)
from app.services.messages import MorningMessageSender
from app.services.monitoring import monitoring
from app.database.models import ChatHistory
from app.database.migrations import apply_migrations
from app.database.backup import backup_database
from app.handlers.commands import CommandHandlers
from app.handlers.messages import MessageHandlers

logger = logging.getLogger(__name__)

class BotApp:
    def __init__(self):
        self.bot = Bot(token=TELEGRAM_TOKEN)
        self.dp = Dispatcher()
        self.scheduler = None
        self.morning_sender = None
        self.keep_alive_task = None
        self.db_pool = None
        self.command_handlers = None
        self.message_handlers = None

    async def keep_alive(self):
        """–ó–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –±–æ—Ç–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
        while True:
            logger.info("–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")
            await asyncio.sleep(300)

    async def on_startup(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤–µ—Ä—Å–∏–∏ {CODE_VERSION}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        self.db_pool = await asyncpg.create_pool(DATABASE_URL)
        await ChatHistory.create_tables(self.db_pool)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        await apply_migrations(self.db_pool)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞
        self.morning_sender = MorningMessageSender(self.bot)
        self.command_handlers = CommandHandlers(self.bot, self.db_pool)
        self.message_handlers = MessageHandlers(self.bot, self.db_pool)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if MONITORING_ENABLED:
            monitoring.set_bot(self.bot)
            
        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.scheduler = AsyncIOScheduler(timezone=pytz.timezone('Europe/Moscow'))
        
        # –£—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.scheduler.add_job(
            self.morning_sender.send_morning_message, 
            trigger=CronTrigger(hour=8, minute=0)
        )
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.scheduler.add_job(
            lambda: ChatHistory.cleanup_old_messages(self.db_pool), 
            trigger=CronTrigger(hour=0, minute=0)
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.scheduler.add_job(
            self.command_handlers.check_database_health,
            trigger='interval',
            minutes=30
        )
        
        # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î
        if BACKUP_ENABLED:
            self.scheduler.add_job(
                backup_database, 
                args=[DATABASE_URL],
                trigger=CronTrigger(day_of_week='mon-sun', hour=3, minute=0)  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00
            )
            
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
        self.scheduler.add_job(
            monitoring.log_memory_usage,
            trigger='interval',
            hours=2
        )
        
        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.keep_alive_task = asyncio.create_task(self.keep_alive())
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        if MONITORING_ENABLED:
            await monitoring.notify_admin(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –≤–µ—Ä—Å–∏—è {CODE_VERSION}")
            
    async def on_shutdown(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ keep_alive
        if self.keep_alive_task and not self.keep_alive_task.done():
            self.keep_alive_task.cancel()
            try:
                await self.keep_alive_task
            except asyncio.CancelledError:
                pass
                
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        if self.scheduler:
            self.scheduler.shutdown()
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if self.db_pool:
            await self.db_pool.close()
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ")
            
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞
        await self.bot.session.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def setup_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self.command_handlers.command_start, Command("start"))
        self.dp.message.register(self.command_handlers.command_version, Command("version"))
        self.dp.message.register(self.command_handlers.command_reset, Command("reset"))
        self.dp.message.register(self.command_handlers.command_stats, Command("stats"))
        self.dp.message.register(self.command_handlers.command_test, Command("test"))
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π
        self.dp.message.register(
            partial(self.command_handlers.command_team_matches, team_name="real"), 
            Command("real")
        )
        self.dp.message.register(
            partial(self.command_handlers.command_team_matches, team_name="lfc"), 
            Command("lfc")
        )
        self.dp.message.register(
            partial(self.command_handlers.command_team_matches, team_name="arsenal"), 
            Command("arsenal")
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.dp.message.register(self.message_handlers.handle_message)

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.setup_handlers()
        await self.on_startup()
        try:
            await self.dp.start_polling(self.bot, allowed_updates=["message"])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            if MONITORING_ENABLED:
                monitoring.log_error(e, {"context": "bot_polling"})
        finally:
            await self.on_shutdown()